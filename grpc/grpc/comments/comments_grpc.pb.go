// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: comments.proto

package comments

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentsAPI_CreateComment_FullMethodName = "/posts.CommentsAPI/createComment"
	CommentsAPI_DeleteComment_FullMethodName = "/posts.CommentsAPI/deleteComment"
	CommentsAPI_UpdateComment_FullMethodName = "/posts.CommentsAPI/updateComment"
)

// CommentsAPIClient is the client API for CommentsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsAPIClient interface {
	CreateComment(ctx context.Context, in *CommentArgs, opts ...grpc.CallOption) (*CommentsReply, error)
	DeleteComment(ctx context.Context, in *CommentArgs, opts ...grpc.CallOption) (*CommentsReply, error)
	UpdateComment(ctx context.Context, in *CommentArgs, opts ...grpc.CallOption) (*CommentsReply, error)
}

type commentsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentsAPIClient(cc grpc.ClientConnInterface) CommentsAPIClient {
	return &commentsAPIClient{cc}
}

func (c *commentsAPIClient) CreateComment(ctx context.Context, in *CommentArgs, opts ...grpc.CallOption) (*CommentsReply, error) {
	out := new(CommentsReply)
	err := c.cc.Invoke(ctx, CommentsAPI_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsAPIClient) DeleteComment(ctx context.Context, in *CommentArgs, opts ...grpc.CallOption) (*CommentsReply, error) {
	out := new(CommentsReply)
	err := c.cc.Invoke(ctx, CommentsAPI_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsAPIClient) UpdateComment(ctx context.Context, in *CommentArgs, opts ...grpc.CallOption) (*CommentsReply, error) {
	out := new(CommentsReply)
	err := c.cc.Invoke(ctx, CommentsAPI_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsAPIServer is the server API for CommentsAPI service.
// All implementations must embed UnimplementedCommentsAPIServer
// for forward compatibility
type CommentsAPIServer interface {
	CreateComment(context.Context, *CommentArgs) (*CommentsReply, error)
	DeleteComment(context.Context, *CommentArgs) (*CommentsReply, error)
	UpdateComment(context.Context, *CommentArgs) (*CommentsReply, error)
}

// UnimplementedCommentsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCommentsAPIServer struct {
}

func (UnimplementedCommentsAPIServer) CreateComment(context.Context, *CommentArgs) (*CommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentsAPIServer) DeleteComment(context.Context, *CommentArgs) (*CommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentsAPIServer) UpdateComment(context.Context, *CommentArgs) (*CommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentsAPIServer) mustEmbedUnimplementedCommentsAPIServer() {}

// UnsafeCommentsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsAPIServer will
// result in compilation errors.
type UnsafeCommentsAPIServer interface {
	mustEmbedUnimplementedCommentsAPIServer()
}

func RegisterCommentsAPIServer(s grpc.ServiceRegistrar, srv CommentsAPIServer) {
	s.RegisterService(&CommentsAPI_ServiceDesc, srv)
}

func _CommentsAPI_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsAPIServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsAPI_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsAPIServer).CreateComment(ctx, req.(*CommentArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsAPI_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsAPIServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsAPI_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsAPIServer).DeleteComment(ctx, req.(*CommentArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsAPI_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsAPIServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsAPI_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsAPIServer).UpdateComment(ctx, req.(*CommentArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentsAPI_ServiceDesc is the grpc.ServiceDesc for CommentsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "posts.CommentsAPI",
	HandlerType: (*CommentsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createComment",
			Handler:    _CommentsAPI_CreateComment_Handler,
		},
		{
			MethodName: "deleteComment",
			Handler:    _CommentsAPI_DeleteComment_Handler,
		},
		{
			MethodName: "updateComment",
			Handler:    _CommentsAPI_UpdateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comments.proto",
}
